//Kth Largest in N Arrays
struct Node {
    int value;
    int id;
    int index;
    
    Node(int _v, int _id, int _index):
        value(_v), id(_id), index(_index) {}
    
    bool operator < (const Node & obj) const {
        return value < obj.value;
    }
};

class Solution {
public:
    /**
     * @param arrays a list of array
     * @param k an integer
     * @return an integer, K-th largest element in N arrays
     */
    int KthInArrays(vector<vector<int>>& arrays, int k) {
        // Write your code here
        int n = arrays.size();
        priority_queue<Node> queue;
        
        for (int i = 0; i < n; ++i) {
            sort(arrays[i].begin(), arrays[i].end());
            
            if (arrays[i].size() > 0) {
                int id = i;
                int index = arrays[i].size() - 1;
                int value = arrays[i][index];
                queue.push(Node(value, id, index));
            }
        }
        
        for (int i = 0; i < k; ++i) {
            Node tmp = queue.top();
            queue.pop();
            int value = tmp.value;
            int id = tmp.id;
            int index = tmp.index;
            
            if (i == k - 1)
                return value;

            if (index > 0) {
                index --;
                value = arrays[id][index];
                queue.push(Node(value, id, index));
            }
        }
    }
};
